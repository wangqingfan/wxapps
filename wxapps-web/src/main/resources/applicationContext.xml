<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:amq="http://activemq.apache.org/schema/core"
	   xmlns:jms="http://www.springframework.org/schema/jms"
	   xmlns:sharding="http://shardingjdbc.io/schema/shardingjdbc/sharding"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd
        http://shardingjdbc.io/schema/shardingjdbc/sharding http://shardingjdbc.io/schema/shardingjdbc/sharding/sharding.xsd">
     <!-- 组件service扫描 -->
	 <context:component-scan base-package="com.beixiao">
     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
	<!-- 配置文件 -->
     <!--ignore-resource-not-found：如果属性文件找不到，是否忽略，默认false，即不忽略，找不到将抛出异常ignore-unresolvable：是否忽略解析不到的属性，如果不忽略，找不到将抛出异常-->
     <context:property-placeholder ignore-unresolvable="true" location="classpath*:/*.properties" />
	<!-- Spring中引入其他配置文件 -->
    <import resource="classpath*:spring-datasource.xml" />
    
        
	<!-- spring和mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     		<property name="dataSource" ref="shardingDataSource"></property>
     		<property name="mapperLocations" value="classpath*:/mybatis/**/*.xml"></property>
     		<!--设置pageHelper,引入mybatis配置文件-->
       <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>
     <!-- DAO接口所在的包，spring会自动查找 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     		<property name="basePackage" value="com.beixiao.*.repository,com.beixiao.sharding.algorithm.repository.*"></property>
     		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 事务 -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="shardingDataSource" />  
    </bean>  
  
    <tx:annotation-driven transaction-manager="transactionManager" /> 
    
    <!--t_user表，数据库sharding策略-->
    <sharding:standard-strategy id="userDatabaseShardingStrategy" sharding-column="user_id"
		precise-algorithm-class="com.beixiao.sharding.algorithm.database.version203.TUserDataBaseStrategy" />
    <!--t_student表，数据库sharding策略-->
    <sharding:standard-strategy id="studentDatabaseShardingStrategy" sharding-column="student_id"
		precise-algorithm-class="com.beixiao.sharding.algorithm.database.version203.TStudentDataBaseStrategy" />
	<!-- 默认库策略 -->
    <sharding:none-strategy id="noneStrategy" />
    <!-- t_user表，分表sharding策略 -->
    <sharding:standard-strategy id="userTableShardingStrategy" sharding-column="user_id" 
     	precise-algorithm-class="com.beixiao.sharding.algorithm.table.version203.TUserTableStrategy" />
    <!-- t_student表，分表sharding策略 -->
    <sharding:standard-strategy id="studentTableShardingStrategy" sharding-column="student_id" 
     	precise-algorithm-class="com.beixiao.sharding.algorithm.table.version203.TUserTableStrategy" />
    
	<sharding:data-source id="shardingDataSource">
        <!--default-data-source指定默认数据源, 即没有在<rdb:table-rules>申明的logic-table表, 即不需要分库分表的表, 全部走默认数据源-->
        <sharding:sharding-rule data-source-names="sharding_0,sharding_1"
                                default-data-source-name="sharding_0"
                                default-database-strategy-ref="noneStrategy"
                                default-table-strategy-ref="noneStrategy">
            <sharding:table-rules>
                <!--
                	actual-data-nodes 真实数据节点，由数据源名（读写分离引用master-slave:data-source中的id属性） + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
                	不填写表示将为现有已知的数据源 + 逻辑表名称生成真实数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况。 
                	database-strategy-ref:数据库选择rule
                	table-strategy-ref：表选择rule
                -->
                <sharding:table-rule logic-table="t_user" actual-data-nodes="sharding_${0..1}.t_user_0${0..2}" 
                database-strategy-ref="userDatabaseShardingStrategy" table-strategy-ref="userTableShardingStrategy"/>
                <sharding:table-rule logic-table="t_student" actual-data-nodes="sharding_${0..1}.t_student_0${0..1}" 
                database-strategy-ref="studentDatabaseShardingStrategy" table-strategy-ref="studentTableShardingStrategy"/>
            </sharding:table-rules>
        </sharding:sharding-rule>
        <sharding:props>
            <prop key="sql.show">true</prop>
            <prop key="executor.size">2</prop>
        </sharding:props>
    </sharding:data-source>
	
    
    <!-- redisTemplate -->
<!-- 	<context:property-placeholder location="classpath:/redis.properties"/> -->
	<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大总数 -->
		<property name="maxTotal" value="${redis.maxActive}"></property>
		<!-- 最大空闲 -->
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		<!-- 最小空闲 -->
		<property name="minIdle" value="${redis.minIdle}"></property>
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
		<!-- 在获取连接时检查有效性 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
		<!-- Idle时进行连接扫描 -->
		<property name="testWhileIdle" value="${redis.testWhileIdle}"></property>
		<!-- 逐出扫描的时间间隔(毫秒)如果为负数，则不运行逐出线程，默认为-1 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"></property>
		<!-- 逐出扫描的时间间隔(毫秒)如果为负数，则不运行逐出线程，默认为-1 -->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"></property>
		<!-- 逐出连接的最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"></property>
	</bean>
	<!-- redis连接工厂 -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.password}"></property>
		<property name="poolConfig" ref="jedisConfig"></property>
		<property name="usePool" value="true"></property>
	</bean>
	<!-- reids操作模板  -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
		<!-- 如果不配置Serializer，那么存储的时候就不能存储对象，只能存储字符串，会提示错误can't cast to string --> 
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
		</property>
	</bean>
</beans>