<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:amq="http://activemq.apache.org/schema/core"
	   xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">
     <!-- 组件service扫描 -->
	 <context:component-scan base-package="com.beixiao">
     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>


	<!-- 配置文件 -->
    <context:property-placeholder location="classpath*:/*.properties"/>
    
    <!-- 数据源 -->
      <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
       		<property name="driverClassName" value="${jdbc.driver}"></property>
       		<property name="url" value="${jdbc.url}"></property>
       		<property name="username" value="${jdbc.username}"></property>
       		<property name="password" value="${jdbc.password}"></property>
       		<property name="initialSize" value="${jdbc.initialSize}"></property><!-- 初始连接数量 -->  
       		<property name="maxActive" value="${jdbc.maxActive}"></property> <!-- 最大连接数量 -->  
       		<property name="maxIdle" value="${jdbc.maxIdle}"></property> <!-- 空闲连接数量 -->  
       		<property name="minIdle" value="${jdbc.minIdle}"></property> <!-- 空闲连接数量 -->  
       		<property name="maxWait" value="${jdbc.maxWait}"></property> <!-- 一个查询10分钟内没有返回，自动放弃 -->
       		<property name="validationQuery" value="SELECT 1" />   <!-- 数据库连接可用性测试语句 -->
       		<property name="testOnBorrow" value="true" />          <!-- 每次获取一个连接的时候，验证一下连接是否可用，语句在validationQuery里面 -->  
       		<property name="removeAbandoned" value="true" />       <!-- 自动处理连接未关闭的问题，Setting this to true can recover db connections from poorly written applications which fail to close a connection.  -->  
       		<property name="removeAbandonedTimeout" value="300" /> <!-- 连接使用后5分钟未关闭，则抛弃 -->  
       		<!-- 每5分钟检查一次，每次检查3个连接，如果连接空闲时间达到5分钟，则认为可以Evict，从连接池排除   
		             空闲的连接是否排除对连接池似乎没有太大影响，我们只需要保证每次获取的连接都可用，所以暂时先不开启  
		        <property name="timeBetweenEvictionRunsMillis" value="300000" />  
		        <property name="numTestsPerEvictionRun" value="3" />  
		        <property name="minEvictableIdleTimeMillis" value="320000" />-->
       </bean>
      <!-- spring和mybatis整合 -->
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       		<property name="dataSource" ref="dataSource"></property>
       		<property name="mapperLocations" value="classpath*:/mybatis/**/*.xml"></property>
       		<!--设置pageHelper,引入mybatis配置文件-->
	        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
      </bean>
       <!-- DAO接口所在的包，spring会自动查找 -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       		<property name="basePackage" value="com.beixiao.*.repository"></property>
       		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
      </bean>
       
       <!-- 事务管理 -->
       <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       		<property name="dataSource" ref="dataSource"></property>
       </bean>
       
       <!-- redisTemplate -->
	<!-- <context:property-placeholder location="classpath:/redis.properties"/>
	<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
		最大总数
		<property name="maxTotal" value="${redis.maxActive}"></property>
		最大空闲
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		最小空闲
		<property name="minIdle" value="${redis.minIdle}"></property>
		最大等待时间
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
		在获取连接时检查有效性
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
		Idle时进行连接扫描
		<property name="testWhileIdle" value="${redis.testWhileIdle}"></property>
		逐出扫描的时间间隔(毫秒)如果为负数，则不运行逐出线程，默认为-1
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"></property>
		每次逐出的最大条目数
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"></property>
		逐出连接的最小空闲时间
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"></property>
	</bean>
	redis连接工厂
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.password}"></property>
		<property name="poolConfig" ref="jedisConfig"></property>
		<property name="usePool" value="true"></property>
	</bean>
	reids操作模板 
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
		如果不配置Serializer，那么存储的时候就不能存储对象，只能存储字符串，会提示错误can't cast to string 
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
		</property>
	</bean> -->
</beans>