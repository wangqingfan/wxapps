<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:amq="http://activemq.apache.org/schema/core"
	   xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd
        ">
     <!-- 组件service扫描 -->
	 <context:component-scan base-package="com.beixiao">
     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
	<!-- 配置文件 -->
    <context:property-placeholder location="classpath*:/*.properties"/>
	<!-- Spring中引入其他配置文件 -->
    <import resource="classpath*:spring-datasource.xml" />
    
	<!-- spring和mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     		<property name="dataSource" ref="shardingDataSource"></property>
     		<property name="mapperLocations" value="classpath*:/mybatis/**/*.xml"></property>
     		<!--设置pageHelper,引入mybatis配置文件-->
       <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>
     <!-- DAO接口所在的包，spring会自动查找 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     		<property name="basePackage" value="com.beixiao.*.repository,com.beixiao.sharding.algorithm.repository.*"></property>
     		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
	
	<!-- 配置好dataSourceRule，即对数据源进行管理 -->
	<bean id="dataSourceRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">
		<constructor-arg>
			<map>
				<entry key="sharding_0" value-ref="sharding_0"/>
				<entry key="sharding_1" value-ref="sharding_1"/>
			</map>
		</constructor-arg>
	</bean>
	<!-- 配置user表，进行分库配置，逻辑表名t_user,每个库实际有三张表 -->
	<bean id="userTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
		<constructor-arg value="t_user" index="0"/>
		<constructor-arg index="1">
			<list>
				<value>t_user_00</value>
				<value>t_user_01</value>
				<value>t_user_02</value>
			</list>
		</constructor-arg>
		<constructor-arg index="2" ref="dataSourceRule"/>
		<constructor-arg index="3" ref="userDatabaseShardingStrategy"/><!-- 库动态选择 -->
		<constructor-arg index="4" ref="userTableShardingStrategy"/><!-- 表动态选择 -->
	</bean>
	<!-- t_user分库策略 -->
	<bean id="userDatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
		<constructor-arg index="0" value="user_id"/>
		<constructor-arg index="1">
			<bean class="com.beixiao.sharding.algorithm.database.UserSingleKeyDatabaseShardingAlgorithm"></bean>
		</constructor-arg>
	</bean>
	<!-- t_user分表策略 -->
	<bean id="userTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
		<constructor-arg index="0" value="user_id"/>
		<constructor-arg index="1">
			<bean class="com.beixiao.sharding.algorithm.table.UserSingleKeyTableShardingAlgorithm"></bean>
		</constructor-arg>
	</bean>
	
	<!-- 配置t_student表进行分库配置，每库有两张表 -->
	<bean id="studentTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
		<constructor-arg index="0" value="t_student"/>
		<constructor-arg index="1">
			<list>
				<value>t_student_00</value>
				<value>t_student_01</value>
			</list>
		</constructor-arg>
		<constructor-arg index="2" ref="dataSourceRule"/>
		<constructor-arg index="3" ref="studentDatabaseShardingStrategy" />
		<constructor-arg index="4" ref="studentTableShardingStrategy" />
	</bean>
	
	<!-- t_student分库策略 -->
	<bean id="studentDatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
		<constructor-arg index="0" value="student_id" />
		<constructor-arg index="1">
			<bean class="com.beixiao.sharding.algorithm.database.StudentSingleKeyDatabaseShardingAlgorithm"></bean>
		</constructor-arg>
	</bean>
	<!-- t_student分表策略 -->
	<bean id="studentTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
		<constructor-arg index="0" value="student_id"/>
		<constructor-arg index="1">
			<bean class="com.beixiao.sharding.algorithm.table.StudentSingleKeyTableShardingAlgorithm"></bean>
		</constructor-arg>
	</bean>
	
	<!-- 构成分库分表的规则，传入数据源集合和每个分库分表的具体规则-->
	<bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
		<constructor-arg index="0" ref="dataSourceRule"></constructor-arg>
		<constructor-arg index="1">
			<list>
				<ref bean="userTableRule"/>
				<ref bean="studentTableRule"/>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- 对DataSource进行封装 -->
	<bean id="shardingDataSource" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">
		<constructor-arg ref="shardingRule"/>
	</bean>
	
	<!-- 事务 -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="shardingDataSource" />  
    </bean>  
  
    <tx:annotation-driven transaction-manager="transactionManager" /> 
    
    <!-- redisTemplate -->
	<context:property-placeholder location="classpath:/redis.properties"/>
	<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大总数 -->
		<property name="maxTotal" value="${redis.maxActive}"></property>
		<!-- 最大空闲 -->
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		<!-- 最小空闲 -->
		<property name="minIdle" value="${redis.minIdle}"></property>
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
		<!-- 在获取连接时检查有效性 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
		<!-- Idle时进行连接扫描 -->
		<property name="testWhileIdle" value="${redis.testWhileIdle}"></property>
		<!-- 逐出扫描的时间间隔(毫秒)如果为负数，则不运行逐出线程，默认为-1 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"></property>
		<!-- 逐出扫描的时间间隔(毫秒)如果为负数，则不运行逐出线程，默认为-1 -->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"></property>
		<!-- 逐出连接的最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"></property>
	</bean>
	<!-- redis连接工厂 -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}"></property>
		<property name="port" value="${redis.port}"></property>
		<property name="password" value="${redis.password}"></property>
		<property name="poolConfig" ref="jedisConfig"></property>
		<property name="usePool" value="true"></property>
	</bean>
	<!-- reids操作模板  -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory"></property>
		<!-- 如果不配置Serializer，那么存储的时候就不能存储对象，只能存储字符串，会提示错误can't cast to string --> 
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
		</property>
	</bean>
</beans>